generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String @unique
  name     String @db.VarChar(100)
  password String @db.VarChar(255)

  customers Customer[]
  Deal      Deal[]
  Task      Task[]

  @@map("users")
}

model Customer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String @db.VarChar(100)
  email String @db.VarChar(100)
  phone String @db.VarChar(30)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  deals Deal[]

  @@map("customers")
}

enum DealStatus {
  IN_PROGRESS
  CLOSED
}

model Deal {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String     @db.VarChar(100)
  description String     @db.VarChar(100)
  status      DealStatus @default(IN_PROGRESS)
  price       Int

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  tasks Task[]

  @@map("deals")
}

model Task {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String  @db.VarChar(100)
  dueDate     String  @db.VarChar(10)
  isCompleted Boolean @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  dealId String
  deal   Deal   @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@map("tasks")
}
